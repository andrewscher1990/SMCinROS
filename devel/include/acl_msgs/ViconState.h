// Generated by gencpp from file acl_msgs/ViconState.msg
// DO NOT EDIT!


#ifndef ACL_MSGS_MESSAGE_VICONSTATE_H
#define ACL_MSGS_MESSAGE_VICONSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Twist.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace acl_msgs
{
template <class ContainerAllocator>
struct ViconState_
{
  typedef ViconState_<ContainerAllocator> Type;

  ViconState_()
    : header()
    , pose()
    , Eulers()
    , twist()
    , pos_accel()
    , Eulers_accel()
    , has_pose(false)
    , has_twist(false)
    , has_accel(false)  {
    }
  ViconState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , pose(_alloc)
    , Eulers(_alloc)
    , twist(_alloc)
    , pos_accel(_alloc)
    , Eulers_accel(_alloc)
    , has_pose(false)
    , has_twist(false)
    , has_accel(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _Eulers_type;
  _Eulers_type Eulers;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _twist_type;
  _twist_type twist;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _pos_accel_type;
  _pos_accel_type pos_accel;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _Eulers_accel_type;
  _Eulers_accel_type Eulers_accel;

   typedef uint8_t _has_pose_type;
  _has_pose_type has_pose;

   typedef uint8_t _has_twist_type;
  _has_twist_type has_twist;

   typedef uint8_t _has_accel_type;
  _has_accel_type has_accel;





  typedef boost::shared_ptr< ::acl_msgs::ViconState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::acl_msgs::ViconState_<ContainerAllocator> const> ConstPtr;

}; // struct ViconState_

typedef ::acl_msgs::ViconState_<std::allocator<void> > ViconState;

typedef boost::shared_ptr< ::acl_msgs::ViconState > ViconStatePtr;
typedef boost::shared_ptr< ::acl_msgs::ViconState const> ViconStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::acl_msgs::ViconState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::acl_msgs::ViconState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace acl_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'acl_msgs': ['/home/peterli/catkin_ws_com/src/acl_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::acl_msgs::ViconState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::acl_msgs::ViconState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::acl_msgs::ViconState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::acl_msgs::ViconState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::acl_msgs::ViconState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::acl_msgs::ViconState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::acl_msgs::ViconState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b7e43266dac9a0f8e73e309a192f76b9";
  }

  static const char* value(const ::acl_msgs::ViconState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb7e43266dac9a0f8ULL;
  static const uint64_t static_value2 = 0xe73e309a192f76b9ULL;
};

template<class ContainerAllocator>
struct DataType< ::acl_msgs::ViconState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "acl_msgs/ViconState";
  }

  static const char* value(const ::acl_msgs::ViconState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::acl_msgs::ViconState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
geometry_msgs/Pose pose\n\
geometry_msgs/Vector3 Eulers\n\
geometry_msgs/Twist twist\n\
geometry_msgs/Vector3 pos_accel\n\
geometry_msgs/Vector3 Eulers_accel\n\
bool has_pose\n\
bool has_twist\n\
bool has_accel\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: geometry_msgs/Twist\n\
# This expresses velocity in free space broken into its linear and angular parts.\n\
Vector3  linear\n\
Vector3  angular\n\
";
  }

  static const char* value(const ::acl_msgs::ViconState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::acl_msgs::ViconState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.pose);
      stream.next(m.Eulers);
      stream.next(m.twist);
      stream.next(m.pos_accel);
      stream.next(m.Eulers_accel);
      stream.next(m.has_pose);
      stream.next(m.has_twist);
      stream.next(m.has_accel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ViconState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::acl_msgs::ViconState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::acl_msgs::ViconState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "Eulers: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.Eulers);
    s << indent << "twist: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.twist);
    s << indent << "pos_accel: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.pos_accel);
    s << indent << "Eulers_accel: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.Eulers_accel);
    s << indent << "has_pose: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.has_pose);
    s << indent << "has_twist: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.has_twist);
    s << indent << "has_accel: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.has_accel);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ACL_MSGS_MESSAGE_VICONSTATE_H
